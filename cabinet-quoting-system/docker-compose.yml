# Cabinet Quoting System - Production Docker Compose Configuration
# Following 2025 Docker best practices: no version field, security hardening, multi-stage builds

services:
  # Frontend - React/Next.js Customer Interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: cabinet-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3002
      - NEXT_PUBLIC_APP_NAME=Cabinet Quoting System
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cabinet-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Admin Interface - React Admin Dashboard
  admin-interface:
    build:
      context: ./admin-interface
      dockerfile: Dockerfile
      target: production
    container_name: cabinet-admin
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3002
      - NEXT_PUBLIC_APP_NAME=Cabinet Admin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cabinet-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Backend API - Express.js REST API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: cabinet-backend
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://cabinet_user:${POSTGRES_PASSWORD:-cabinet_secure_2025}@database:5432/cabinet_quoting
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-change-in-production}
      - API_PORT=3002
      - CORS_ORIGIN=http://frontend:3000,http://admin-interface:3001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    networks:
      - cabinet-network
    volumes:
      - backend-uploads:/app/uploads:rw
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Quote Engine - PDF Generation Service
  quote-engine:
    build:
      context: ./quote-engine
      dockerfile: Dockerfile
      target: production
    container_name: cabinet-quote-engine
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - QUOTE_ENGINE_PORT=3003
      - BACKEND_API_URL=http://backend:3002
      - PDF_STORAGE_PATH=/app/pdf-storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cabinet-network
    volumes:
      - quote-pdfs:/app/pdf-storage:rw
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Database - PostgreSQL with Persistent Storage
  database:
    image: postgres:16-alpine
    container_name: cabinet-database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cabinet_quoting
      - POSTGRES_USER=cabinet_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cabinet_secure_2025}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cabinet_user -d cabinet_quoting"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - cabinet-network
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./database/init:/docker-entrypoint-initdb.d:ro
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Nginx - Reverse Proxy and Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: cabinet-nginx
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      frontend:
        condition: service_healthy
      admin-interface:
        condition: service_healthy
      backend:
        condition: service_healthy
      quote-engine:
        condition: service_healthy
    networks:
      - cabinet-network
    volumes:
      - nginx-logs:/var/log/nginx:rw
      - ./nginx/ssl:/etc/nginx/ssl:ro
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE

# Networks
networks:
  cabinet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes - Persistent Storage
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  backend-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  quote-pdfs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/quote-pdfs
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx-logs